FILE: simple.kt
    package foo.bar

    public final class ResolveException : R|kotlin/Throwable| {
        public constructor(): R|foo/bar/ResolveException| {
            super<R|kotlin/Throwable|>()
        }

    }
    @R|arrow/inject/annotations/Resolve|() public final inline fun <A> resolve(): R|A| {
        ^resolve throw R|foo/bar/ResolveException.ResolveException|()
    }
    @R|arrow/inject/annotations/Context|() @R|kotlin/annotation/Retention|(value = Q|kotlin/annotation/AnnotationRetention|.R|kotlin/annotation/AnnotationRetention.RUNTIME|) @R|kotlin/annotation/Target|(allowedTargets = vararg(Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.CLASS|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.FUNCTION|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.PROPERTY|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.VALUE_PARAMETER|)) @R|kotlin/annotation/MustBeDocumented|() public final annotation class Given : R|kotlin/Annotation| {
        public constructor(): R|foo/bar/Given| {
            super<R|kotlin/Any|>()
        }

    }
    @R|arrow/inject/annotations/Context|() @R|kotlin/annotation/Retention|(value = Q|kotlin/annotation/AnnotationRetention|.R|kotlin/annotation/AnnotationRetention.RUNTIME|) @R|kotlin/annotation/Target|(allowedTargets = vararg(Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.CLASS|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.FUNCTION|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.PROPERTY|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.VALUE_PARAMETER|)) @R|kotlin/annotation/MustBeDocumented|() public final annotation class Config : R|kotlin/Annotation| {
        public constructor(): R|foo/bar/Config| {
            super<R|kotlin/Any|>()
        }

    }
    @R|foo/bar/Given|() public final object X : R|kotlin/Any| {
        private constructor(): R|foo/bar/X| {
            super<R|kotlin/Any|>()
        }

        public final val value: R|kotlin/String| = String(yes!)
            public get(): R|kotlin/String|

    }
    @R|foo/bar/Config|() public final object Y : R|kotlin/Any| {
        private constructor(): R|foo/bar/Y| {
            super<R|kotlin/Any|>()
        }

        public final val value: R|kotlin/String| = String(nope!)
            public get(): R|kotlin/String|

    }
    @R|arrow/inject/annotations/Inject|() public final fun foo(id: R|kotlin/Int|, @R|foo/bar/Given|() x: R|foo/bar/X|, @R|foo/bar/Config|() y: R|foo/bar/Y|): R|kotlin/String| {
        ^foo <strcat>(R|<local>/id|, String(: ), R|<local>/x|.R|foo/bar/X.value|, String( to ), R|<local>/y|.R|foo/bar/Y.value|)
    }
    public final fun box(): R|kotlin/String| {
        lval result: R|kotlin/String| = R|foo/bar/foo|(Int(1))
        ^box when () {
            ==(R|<local>/result|, String(1: yes! to nope!)) ->  {
                String(OK)
            }
            else ->  {
                <strcat>(String(Fail: ), R|<local>/result|)
            }
        }

    }
FILE: __GENERATED DECLARATIONS__.kt
    package foo.bar

    @R|arrow/inject/annotations/CompileTime|() public final fun foo(id: R|kotlin/Int|, @R|foo/bar/Given|() x: R|foo/bar/X| = R|foo/bar/resolve|<out R|foo/bar/X|>(), @R|foo/bar/Config|() y: R|foo/bar/Y| = R|foo/bar/resolve|<out R|foo/bar/Y|>(), _unit0_: R|kotlin/Unit| = R|kotlin/Unit|()): R|kotlin/String|
